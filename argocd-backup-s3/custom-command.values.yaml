# comment out the timeZone if you want to keep things default

# https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
timeZone: 'Asia/Istanbul'  # optional -- https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
schedule: "00 20 * * *"    # https://crontab.guru/#00_20_*_*_*

# --- Secret Env Vars ---
secretEnvVars:
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  AWS_DEFAULT_REGION: "eu-west-1"
  S3_BUCKET_NAME: ""
  S3_UPLOAD_PREFIX: "my-argocd-backups/dev/"
  ARGOCD_SERVER: "argocd.argocd"
  ARGOCD_ADMIN_PASSWORD: ""
  
  # If you want to use S3 compatible storage, you can use the following env var
  #  https://docs.aws.amazon.com/sdkref/latest/guide/feature-ss-endpoints.html
  # AWS_ENDPOINT_URL_S3: 'https://s3.amazonaws.com'

envVarSecretReferences: []
#  - name: ARGOCD_ADMIN_PASSWORD
#  # remove the .secretEnvVars.ARGOCD_ADMIN_PASSWORD if you use this
#    valueFrom:
#      secretKeyRef:
#        name: argocd-initial-admin-secret
#        key: password

extraObjects: []
#  - apiVersion: v1
#    kind: Secret
#    metadata:
#      name: extra-secret
#    type: Opaque
#    stringData:
#      AAA: BBB

resources:
  limits:
    memory: "256Mi"
  requests:
    cpu: "250m"
    memory: "256Mi"

image:
  repository: "ghcr.io/oguzhan-yilmaz/argocd-backup-s3"
  tag: "latest"
  pullPolicy: Always

custom_command:
  - /bin/bash
  - -c
  - |
    # ----------- ENV VAR CHECKS -----------
    for var in ARGOCD_SERVER ARGOCD_ADMIN_PASSWORD S3_BUCKET_NAME S3_UPLOAD_PREFIX; do
        if [ -z "${!var}" ]; then
        echo "ERROR: Env Var '$var' is not set. Aborting."
        exit 1
        fi
    done
    echo "------------*------------*------------"

    # ----------- AWS CLI CHECKS -----------
    echo "CHECK: Do we have AWS S3 access to the $S3_BUCKET_NAME  bucket?"
    aws s3api head-bucket --bucket "$S3_BUCKET_NAME" || {
        echo "ERROR: Bucket access failed, current AWS identity:"
        aws sts get-caller-identity
        echo "ERROR: Please fix AWS permissions or the region. Aborting..."
        exit 1
    } 
    echo "------------*------------*------------"

    # ----------- LOGIN TO ARGOCD -----------
    echo "Logging in to ArgoCD Server: ${ARGOCD_SERVER}"
    argocd login "${ARGOCD_SERVER}" --username admin --password "${ARGOCD_ADMIN_PASSWORD}" --plaintext || {
        echo "ERROR: ArgoCD login failed. Make sure to use admin account password!"
        exit 1
    }

    echo "Logged in to ArgoCD Server, checking current context: ${ARGOCD_SERVER}"
    argocd context
    argocd account get-user-info
    echo "------------*------------*------------"

    # ----------- ARGOCD EXPORT -----------

    export FILENAME="argocd-export-$(date +"%Y-%m-%d--%H-%M").yaml"
    echo "Setting the export filename to: ${FILENAME}"

    echo "Running the 'argocd admin export' command"
    argocd admin export > "$FILENAME"

    echo "Export yaml file line count: $(wc -l $FILENAME)"
    echo "------------*------------*------------"

    # ----------- S3 UPLOAD -----------
    echo "Uploading to  s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX%/}/${FILENAME}"
    aws s3 cp ${FILENAME} s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX%/}/${FILENAME}
    echo "------------*------------*------------"

    echo "Listing  s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX}"
    echo "---"
    aws s3 ls s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX}