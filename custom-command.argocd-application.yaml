apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-backup-s3
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://oguzhan-yilmaz.github.io/argocd-backup-s3/
    targetRevision: '*.*.*'  # latest version

    chart: argocd-backup-s3
    helm:
      releaseName: argocd-backup-s3

      # Values file as block file. This takes precedence over values.yaml in the chart
      # ------------------- valuesObject -------------------
      valuesObject:
        # --- Custom Command  ---
        custom_command:
          - /bin/bash
          - -c
          - |
            #!/bin/bash
            set -e
            set -o pipefail
            # ----------- ENV VAR CHECKS -----------
            for var in ARGOCD_SERVER ARGOCD_ADMIN_PASSWORD S3_BUCKET_NAME S3_UPLOAD_PREFIX; do
                if [ -z "${!var}" ]; then
                echo "ERROR: Env Var '$var' is not set. Aborting."
                exit 1
                fi
            done
            echo "------------*------------*------------"
            # ----------- AWS CLI CHECKS -----------
            echo "CHECK: Do we have AWS S3 access to the $S3_BUCKET_NAME  bucket?"
            aws s3api head-bucket --bucket "$S3_BUCKET_NAME" || {
                echo "ERROR: Bucket access failed, current AWS identity:"
                aws sts get-caller-identity
                echo "ERROR: Please fix AWS permissions or the region. Aborting..."
                exit 1
            } 
            echo "------------*------------*------------"

            # ----------- LOGIN TO ARGOCD -----------
            echo "Logging in to ArgoCD Server: ${ARGOCD_SERVER}"
            if [ -z "${ARGOCD_ADMIN_USERNAME}" ];then
              echo "WARNING: ARGOCD_ADMIN_USERNAME is empty; continue with 'admin user'"
              export ARGOCD_ADMIN_USERNAME="admin"
            fi

            argocd login "${ARGOCD_SERVER}" --username ${ARGOCD_ADMIN_USERNAME} --password "${ARGOCD_ADMIN_PASSWORD}" "${ARGOCD_EXTRA_ARGS:-''}" || {
                echo "ERROR: ArgoCD login failed. Make sure to use admin account password!"
                exit 1
            }

            echo "Logged in to ArgoCD Server, checking current context: ${ARGOCD_SERVER}"
            argocd context
            argocd account get-user-info
            echo "------------*------------*------------"

            # ----------- ARGOCD EXPORT -----------

            export FILENAME="argocd-export-$(date +"%Y-%m-%d--%H-%M").yaml"
            echo "Setting the export filename to: ${FILENAME}"

            echo "Running the 'argocd admin export' command"
            argocd admin export > "$FILENAME"

            echo "Export yaml file line count: $(wc -l $FILENAME)"
            echo "------------*------------*------------"

            # ----------- S3 UPLOAD -----------
            echo "Uploading to  s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX%/}/${FILENAME}"
            aws s3 cp ${FILENAME} s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX%/}/${FILENAME}
            echo "------------*------------*------------"

            echo "Listing  s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX}"
            echo "---"
            aws s3 ls s3://${S3_BUCKET_NAME}/${S3_UPLOAD_PREFIX}  
      # ------------------- /valuesObject -------------------

  # Destination cluster and namespace to deploy the application
  destination:
    name: in-cluster
    namespace: argocd
    # namespace: monitoring

  # Extra information to show in the Argo CD Application details tab
  info:
    - name: 'Github Repo'
      value: 'https://github.com/oguzhan-yilmaz/argocd-backup-s3'

  # Sync policy
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    - ApplyOutOfSyncOnly=true # Only sync out-of-sync resources, rather than applying every object in the application

  revisionHistoryLimit: 5