name: Helm package and push to Github Pages
on:
  push:
    # run the Github Action on every tag versioned as v*.*.*
    tags:
      - "v*.*.*" 

jobs:
  helm-package-and-push-to-gh-pages-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Helm + yq + jq
        run: |
          sudo snap install yq
          sudo snap install helm --classic
          sudo snap install jq

      - name: Helm Package
        id: helm_package
        run: |
          echo "Tag version: $GITHUB_REF"
          RELEASE_TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${RELEASE_TAG:-v666.666.666}"
          echo "VERSION Version: $VERSION"
          CLEAN_VERSION="${VERSION#v}"
          echo "CLEAN_VERSION Version: $CLEAN_VERSION"

          # lint the chart, and so fail the action 
          helm lint argocd-backup-s3

          # package the helm chart
          PACKAGE_OUTPUT=$(helm package --version "$CLEAN_VERSION" --app-version "$CLEAN_VERSION" argocd-backup-s3)
          echo "PACKAGE_OUTPUT=$PACKAGE_OUTPUT"
          PACKAGE_NAME=$(basename "$PACKAGE_OUTPUT")
          echo "Generated helm package: $PACKAGE_NAME"
          # save the generated package name to github_output to pass it to next step
          echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package-version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
      

      - name: Patch argocd application yaml
        id: argocd-application
        run: |
          VERSIONED_ARGOCD_APP_YAML="argocd-application-${{ steps.helm_package.outputs.package-version}}.yaml"
          cp argocd-application.yaml "$VERSIONED_ARGOCD_APP_YAML"
          echo "Current targetRevision: $(yq '.spec.source.targetRevision' $VERSIONED_ARGOCD_APP_YAML)"
          yq e '.spec.source.targetRevision = "${{ steps.helm_package.outputs.package-version}}"' --inplace $VERSIONED_ARGOCD_APP_YAML
          echo "Patched targetRevision: $(yq '.spec.source.targetRevision' $VERSIONED_ARGOCD_APP_YAML)"
          # save to the github_output to pass it to next step
          echo "argocd-application-filename=$VERSIONED_ARGOCD_APP_YAML" >> $GITHUB_OUTPUT
      
      - name: Print helm_package step output
        run: |
          echo "package-name=$MESSAGE"
        env:
          MESSAGE: ${{ steps.helm_package.outputs.package-name}}

      - name: Create new Release and upload helm artifact
        id: create_release_and_upload_artifacts
        uses: softprops/action-gh-release@v2.0.8
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ steps.helm_package.outputs.package-name}}
            ${{ steps.argocd-application.outputs.argocd-application-filename}}
          token: ${{ secrets.GHCR_TOKEN }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          body: |
            # argocd-backup-s3

            [![Artifact Hub](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/argocd-backup-s3)](https://artifacthub.io/packages/helm/argocd-backup-s3/argocd-backup-s3)
            [![Build and publish Docker image to ghcr.io](https://github.com/oguzhan-yilmaz/argocd-backup-s3/actions/workflows/docker-build-and-push.yaml/badge.svg)](https://github.com/oguzhan-yilmaz/argocd-backup-s3/actions/workflows/docker-build-and-push.yaml)
            [![Helm package and push to Github Pages](https://github.com/oguzhan-yilmaz/argocd-backup-s3/actions/workflows/helm-package-and-publish.yaml/badge.svg)](https://github.com/oguzhan-yilmaz/argocd-backup-s3/actions/workflows/helm-package-and-publish.yaml)

            **Backup your ArgoCD Instance — the easy way**

            - 🔄 Automated backups using Kubernetes CronJob
            - 📦 Uses official `argocd admin export` command for reliable backups
            - 🗄️ Supports any S3-compatible storage (AWS S3, MinIO, etc.)
            - 🔒 Secure credential management through Kubernetes secrets
            - 🚀 Easy deployment via Helm chart or ArgoCD application
            - ⏰ Configurable backup schedule and timezone
            - 🔍 Detailed logging and error reporting

            **Quick Links**

            - 🐋 [Docker Image](https://github.com/oguzhan-yilmaz/argocd-backup-s3/pkgs/container/argocd-backup-s3)
            - 📜 [Helm Package](https://artifacthub.io/packages/helm/argocd-backup-s3/argocd-backup-s3)
            - 🔰 [Helm Index](https://oguzhan-yilmaz.github.io/argocd-backup-s3/)
            - 📝 [Github Releases](https://github.com/oguzhan-yilmaz/argocd-backup-s3/releases)

            ## Option 1: Install with Helm

            **Helm Repo**
            
            1. Add the Helm repository
            
            ```bash
            helm repo add argocd-backup-s3 https://oguzhan-yilmaz.github.io/argocd-backup-s3/
            helm repo update argocd-backup-s3
            ```

            2. Get the default values file
            
            ```bash
            helm show values argocd-backup-s3/argocd-backup-s3 > my-argocd-backup-s3.values.yaml
            ```

            3. Configure the required values in `my-argocd-backup-s3.values.yaml`

            ```yaml
            timeZone: 'Asia/Istanbul'  # optional -- https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
            schedule: "00 20 * * *"    # https://crontab.guru/#00_20_*_*_* 

            secretEnvVars:
              AWS_ACCESS_KEY_ID: ""
              AWS_SECRET_ACCESS_KEY: ""
              AWS_DEFAULT_REGION: ""
              S3_UPLOAD_PREFIX: ""
              S3_BUCKET_NAME: ""
              ARGOCD_SERVER: ""
              ARGOCD_ADMIN_PASSWORD: ""
            ```

            3. Helm Install (latest version)

            ```bash
            helm upgrade --install \
              -n argocd \
              -f my-argocd-backup-s3.values.yaml \
              argocd-backup-s3 argocd-backup-s3/argocd-backup-s3
            ```

            3. Helm Install (current version)

            ```bash
            helm upgrade --install \
              -n argocd \
              --version ${{ steps.helm_package.outputs.package-version}} \
              -f my-argocd-backup-s3.values.yaml \
              argocd-backup-s3 argocd-backup-s3/argocd-backup-s3
            ```

            ## Option 2: Install with ArgoCD

            1. Download the ArgoCD application manifest:
            ```bash
            curl -sL https://raw.githubusercontent.com/oguzhan-yilmaz/argocd-backup-s3/refs/heads/main/argocd-application.yaml -o argocd-backup-s3.argoapp.yaml
            ```
            2. Edit the `.valuesObject` section in the manifest with your configuration
            3. Apply the manifest:
            ```bash
            kubectl apply -f argocd-backup-s3.argoapp.yaml
            ```

            **ArgoCD Application (current version)**

            First, download the `argocd-application-${{ steps.helm_package.outputs.package-version}}.yaml` from assets.

            ```bash
            kubectl apply -f argocd-application-${{ steps.helm_package.outputs.package-version}}.yaml
            ```

            ## AWS S3 Setup

            The following script helps you set up the required AWS resources (S3 bucket and IAM user) for the backup solution:

            ```bash
            # Set your company prefix
            PREFIX="mycompany-argocd-backup-s3"

            # Get AWS Account Info
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            AWS_REGION=$(aws configure get region 2>/dev/null || echo "eu-west-1")

            echo "AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID}"
            echo "AWS_REGION: ${AWS_REGION}"

            # Create bucket name using AWS Account ID as suffix
            BUCKET_NAME="${PREFIX}-${AWS_ACCOUNT_ID}"
            IAM_USER_NAME="${BUCKET_NAME}"

            echo "BUCKET_NAME: ${BUCKET_NAME}"
            echo "IAM_USER_NAME: ${IAM_USER_NAME}"

            # Create S3 Bucket
            aws s3 mb "s3://${BUCKET_NAME}" --region "${AWS_REGION}"

            # Create IAM User and Policy
            aws iam create-user --user-name "${IAM_USER_NAME}"

            POLICY_NAME="${IAM_USER_NAME}-bucket-access-policy"
            aws iam create-policy \
                --policy-name "${POLICY_NAME}" \
                --policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:ListBucket",
                            "s3:DeleteObject"
                        ],
                        "Resource": [
                            "arn:aws:s3:::'"${BUCKET_NAME}"'",
                            "arn:aws:s3:::'"${BUCKET_NAME}"'/*"
                        ]
                    }
                ]
            }'

            # Attach Policy to User
            aws iam attach-user-policy \
                --user-name "${IAM_USER_NAME}" \
                --policy-arn "$(aws iam list-policies --query "Policies[?PolicyName=='${POLICY_NAME}'].Arn" --output text)"

            # Create Access Keys
            CREDENTIALS=$(aws iam create-access-key --user-name "${IAM_USER_NAME}")

            # Print Helm Values
            echo "------ SUCCESS ------"
            echo "Helm values.yaml:"
            echo ""
            echo "secretEnvVars:"
            echo "  AWS_ACCESS_KEY_ID: '$(echo "${CREDENTIALS}" | jq -r '.AccessKey.AccessKeyId')'"
            echo "  AWS_SECRET_ACCESS_KEY: '$(echo "${CREDENTIALS}" | jq -r '.AccessKey.SecretAccessKey')'"
            echo "  AWS_DEFAULT_REGION: ${AWS_REGION}"
            echo "  S3_BUCKET_NAME: ${BUCKET_NAME}"
            echo "  S3_UPLOAD_PREFIX: my-argo-instance/"
            echo "  ARGOCD_SERVER: argocd-server.argocd"
            echo "  ARGOCD_ADMIN_USERNAME: 'admin'"
            echo "  ARGOCD_ADMIN_PASSWORD: ''"
            echo "  AWS_ENDPOINT_URL_S3: 'https://s3.amazonaws.com'"
            ```

      - name: print release upload output
        run: |
          echo "assets=${{ steps.create_release_and_upload_artifacts.outputs.assets}}"
          
      - name: Save artifact download url
        id: helm_package_download_url
        run: |
          DOWNLOAD_URL=$(echo '${{ steps.create_release_and_upload_artifacts.outputs.assets}}' | jq '.[0].browser_download_url')
          echo "DOWNLOAD_URL=$DOWNLOAD_URL"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

      - name: Print uploaded helm_package download url
        run: |
          echo 'package-name=${{ steps.helm_package_download_url.outputs.download_url}}'

      - name: Clone gh-pages branch and update helm index.yaml on github pages
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GIT_AUTHOR_EMAIL: "Oguzhan Yilmaz"
          GIT_AUTHOR_NAME: "oguzhanylmz271@gmail.com"
        run: |
          git config --global user.email "oguzhanylmz271@gmail.com"
          git config --global user.name "Oguzhan Yilmaz"
          git remote set-url origin https://x-access-token:${{ secrets.GHCR_TOKEN }}@github.com/oguzhan-yilmaz/argocd-backup-s3.git
          # clone gh-pages branch
          git clone -b gh-pages https://github.com/oguzhan-yilmaz/argocd-backup-s3.git gh-pages-clone
          ls -al
          ls -al gh-pages-clone

          # merge the helm index.yaml
          ACTUAL_RELEASE_URL="${{ steps.helm_package_download_url.outputs.download_url}}"
          RELEASE_BASE_URL="${ACTUAL_RELEASE_URL%/*}"
          echo "RELEASE_BASE_URL=$RELEASE_BASE_URL"
          helm repo index . --url "$RELEASE_BASE_URL" --merge gh-pages-clone/index.yaml
          ls -al

          # replace the index.yaml with the new one
          echo "Old index.yaml"
          cat gh-pages-clone/index.yaml
          rm gh-pages-clone/index.yaml
          cp index.yaml gh-pages-clone/index.yaml
          
          # check out the new index.yaml
          cd gh-pages-clone
          pwd
          echo "New index.yaml"
          cat index.yaml
          git status

          # commit and push the new index.yaml
          git add index.yaml
          git commit -m "update index.yaml in Github Action"
          git remote set-url origin https://x-access-token:${{ secrets.GHCR_TOKEN }}@github.com/oguzhan-yilmaz/argocd-backup-s3.git
          git push
          git status